// Суть задания: найти сумму всех значений узлов в древовидной структуре данных.

// Алгоритмы:
// Рекурсивный метод - использует рекурсию для обхода дерева и суммирования значений узлов.
// Итеративный метод - использует стек для обхода дерева и суммирования значений узлов.

// Сложность алгоритма:
// Рекурсивный метод: Временная сложность - O(N), где N - количество узлов в дереве. Пространственная сложность - O(H), где H - высота дерева (глубина).
// Итеративный метод: Временная сложность - O(N), где N - количество узлов в дереве. Пространственная сложность - O(M), где M - максимальное количество узлов в одном уровне дерева (ширина дерева).

// Древовидная структура данных, представляющая собой массив объектов с полями 'v' и 'c'.
const tree = [
  {
    v: 5,
    c: [
      {
        v: 10,
        c: [
          {
            v: 11,
          },
        ],
      },
      {
        v: 7,
        c: [
          {
            v: 5,
            c: [
              {
                v: 1,
              },
            ],
          },
        ],
      },
    ],
  },
  {
    v: 5,
    c: [
      {
        v: 10,
      },
      {
        v: 15,
      },
    ],
  },
];

// Рекурсивная функция для суммирования значений узлов в древе.
const recursive = (tree) => {
  let sum = 0;
  tree.forEach((node) => {
    sum += node.v; // Добавляем значение текущего узла к сумме.
    if (!node.c) {
      return node.v; // Если у узла нет детей, возвращаем его значение.
    }
    sum += recursive(node.c); // Рекурсивно вызываем функцию для детей и добавляем их значения.
  });
  return sum;
};

// Итеративная функция для суммирования значений узлов в древе с использованием стека.
const iteration = (tree) => {
  if (!tree.length) {
    return 0;
  }
  let sum = 0;
  let stack = [];
  tree.forEach((node) => stack.push(node)); // Инициализируем стек корневыми узлами.
  while (stack.length) {
    const node = stack.pop();
    sum += node.v; // Добавляем значение текущего узла к сумме.
    if (node.c) {
      node.c.forEach((child) => stack.push(child)); // Добавляем детей узла в стек.
    }
  }
  return sum;
};

console.log(iteration(tree)); // Вызываем итеративную функцию и выводим сумму.
console.log(recursive(tree)); // Вызываем рекурсивную функцию и выводим сумму.
